#!/usr/bin/env python3
"""
Teste para verificar se os erros JavaScript foram corrigidos
"""

import os
import sys
import django

# Configurar Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecoimpact.settings')
django.setup()

from django.test import TestCase, Client
from django.urls import reverse
from simulacao.models import Cidade

def teste_pagina_simulador():
    """Testa se a p√°gina do simulador carrega sem erros"""
    
    print("üß™ TESTANDO CORRE√á√ïES JAVASCRIPT")
    print("=" * 50)
    
    # Verificar se existem cidades no banco
    cidades_count = Cidade.objects.count()
    print(f"‚úÖ Cidades no banco: {cidades_count}")
    
    if cidades_count == 0:
        print("‚ö†Ô∏è  Nenhuma cidade encontrada - criando uma cidade de teste")
        Cidade.objects.create(
            nome="Bel√©m - Teste",
            populacao=1500000,
            pib_per_capita=35000.00
        )
    
    # Testar requisi√ß√£o GET (p√°gina inicial)
    client = Client()
    try:
        response = client.get('/simular/')
        
        print(f"‚úÖ Status Code: {response.status_code}")
        
        if response.status_code == 200:
            # Verificar se o JavaScript externo est√° sendo carregado
            content = response.content.decode('utf-8')
            
            checks = [
                ('Chart.js CDN', 'chart.js' in content),
                ('Arquivo JS externo', 'simulador.js' in content),
                ('Canvas do gr√°fico', 'id="impactChart"' in content),
                ('Formul√°rio presente', 'id="simulationForm"' in content),
                ('Campos ambientais', 'consumo_agua_pessoa' in content),
                ('Sele√ß√£o de cidades', 'toggleCity' in content or 'city-card' in content),
            ]
            
            print("\nüìã VERIFICA√á√ïES DA P√ÅGINA:")
            for check_name, result in checks:
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check_name}")
            
            return all(result for _, result in checks)
        else:
            print(f"‚ùå Erro na p√°gina: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar p√°gina: {e}")
        return False

def teste_arquivo_js_estatico():
    """Verifica se o arquivo JavaScript est√°tico existe"""
    
    print(f"\nüìÅ TESTANDO ARQUIVO JAVASCRIPT EST√ÅTICO")
    print("=" * 50)
    
    js_path = os.path.join(
        os.path.dirname(__file__), 
        'static', 'js', 'simulador.js'
    )
    
    if os.path.exists(js_path):
        print("‚úÖ Arquivo simulador.js existe")
        
        # Verificar conte√∫do do arquivo
        with open(js_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        js_checks = [
            ('Fun√ß√£o toggleCity', 'toggleCity' in content),
            ('Fun√ß√£o createImpactChart', 'createImpactChart' in content),
            ('Event listeners', 'addEventListener' in content),
            ('Tratamento de Chart.js', 'Chart' in content),
            ('Tratamento de erros', 'try' in content and 'catch' in content),
        ]
        
        print("\nüîç VERIFICA√á√ïES DO JAVASCRIPT:")
        for check_name, result in js_checks:
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {check_name}")
        
        return all(result for _, result in js_checks)
    else:
        print("‚ùå Arquivo simulador.js n√£o encontrado!")
        return False

def teste_simulacao_completa():
    """Testa uma simula√ß√£o completa com par√¢metros reais"""
    
    print(f"\n‚öôÔ∏è  TESTANDO SIMULA√á√ÉO COMPLETA")
    print("=" * 50)
    
    # Buscar primeira cidade dispon√≠vel
    cidade = Cidade.objects.first()
    if not cidade:
        print("‚ùå Nenhuma cidade dispon√≠vel para teste")
        return False
    
    client = Client()
    
    # Dados de teste com novos par√¢metros ambientais
    dados_simulacao = {
        'cidades_selecionadas': [cidade.id],
        'numero_turistas': 50000,
        'gasto_medio': 200.0,
        'duracao_estadia': 7,
        'multiplicador': 2.5,
        'consumo_agua_pessoa': 150.0,
        'producao_lixo_pessoa': 2.5,
    }
    
    try:
        response = client.post('/simular/', dados_simulacao)
        
        print(f"‚úÖ Simula√ß√£o executada - Status: {response.status_code}")
        
        if response.status_code == 200:
            content = response.content.decode('utf-8')
            
            # Verificar se os resultados ambientais est√£o presentes
            result_checks = [
                ('Impacto econ√¥mico', 'Impacto Econ√¥mico' in content),
                ('Consumo de √°gua', 'm¬≥' in content),
                ('Produ√ß√£o de lixo', 'ton' in content),
                ('Gr√°fico com dados', 'data-chart' in content),
                ('Par√¢metros ambientais', 'Impactos Ambientais' in content),
            ]
            
            print("\nüìä VERIFICA√á√ïES DOS RESULTADOS:")
            for check_name, result in result_checks:
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check_name}")
            
            return all(result for _, result in result_checks)
        else:
            print(f"‚ùå Erro na simula√ß√£o: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DE CORRE√á√ÉO JAVASCRIPT\n")
    
    teste1 = teste_pagina_simulador()
    teste2 = teste_arquivo_js_estatico()
    teste3 = teste_simulacao_completa()
    
    print(f"\n{'='*50}")
    if teste1 and teste2 and teste3:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ JavaScript corrigido e funcionando")
        print("‚úÖ Arquivo est√°tico criado")
        print("‚úÖ Simula√ß√£o com novos par√¢metros OK")
        print("‚úÖ Gr√°fico de pizza integrado")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        if not teste1: print("   - Erro na p√°gina do simulador")
        if not teste2: print("   - Problema no arquivo JavaScript")
        if not teste3: print("   - Erro na simula√ß√£o completa")
        sys.exit(1)
